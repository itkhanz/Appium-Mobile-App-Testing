{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red15\green121\blue172;\red38\green38\blue38;\red255\green255\blue255;
\red39\green42\blue42;\red184\green14\blue61;\red251\green252\blue255;\red27\green31\blue34;\red21\green23\blue26;
}
{\*\expandedcolortbl;;\cssrgb\c0\c54902\c72941;\cssrgb\c20000\c20000\c20000;\cssrgb\c100000\c100000\c100000;
\cssrgb\c20392\c21961\c21961;\cssrgb\c78039\c14510\c30588;\cssrgb\c98824\c99216\c100000;\cssrgb\c14118\c16078\c18039;\cssrgb\c10588\c12157\c13725\c5098;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww30220\viewh15860\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs36 \cf0 \

\f1\b Automating Hybrid apps and Mobile Browser: Basics
\f0\b0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f1\b Native view: 
\f0\b0 \
- Developed using native SDKs i.e. Java for Android and Swift for iOS. Native to the OS. Platform specific.\
\

\f1\b WebView: 
\f0\b0 \
- Developed using HTML, CSS and JavaScript.\
- WebView container that uses browser functionality i.e. Chrome for Android and Safari for iOS \
\

\f1\b Mobile Browser:
\f0\b0 \
- Safari for iOS, Chrome for Android\
- Developed using HTML, CSS and JavaScript\
\

\f1\b Inspecting Hybrid App/Mobile Browser elements:
\f0\b0 \
- Appium inspector may be able to inspect the WebView elements, but natively. In that case, need to define different selectors for Android and iOS\
- WebView elements can be inspected using Chrome remote debugger or Safari Web Inspector\
- WebView elements are common for both Android and iOS\
- For Android, in order to inspect WebView elements, developer need to set {\field{\*\fldinst{HYPERLINK "http://developer.android.com/reference/android/webkit/WebView.html#setWebContentsDebuggingEnabled(boolean)"}}{\fldrslt 
\fs32 \cf2 \expnd0\expndtw0\kerning0
setWebContentsDebuggingEnabled}}
\fs32 \cf2 \expnd0\expndtw0\kerning0
 
\fs36 \cf0 \kerning1\expnd0\expndtw0 to true within the app\
- For Android, the default ChromeDriver version in Appium should be compatible with the Chrome browser version on the device\
- For iOS, Appium can automate WkWebView and UIWebView elements, but not SafariViewController elements.\
\
\

\f1\b HybridApp: Inspecting WebView elements natively using Appium Inspector
\f0\b0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
- We may be able to inspect WebView elements using Appium Inspector, but natively\
- How to check if a page or a portion of the page is a WebView or a native view\
- Will show you one case where in we are not able to inspect the WebView elements\
\

\f1\b HybridApp: Inspecting WebView elements in Web mode using Appium Inspector
\f0\b0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
- We may be able to inspect WebView elements using Appium Inspector in Web mode\
- How to check if a page or a portion of the page is a WebView or a native view\
- May be unreliable\
\

\f1\b iOS: Hybrid app and Safari browser: Inspecting WebView elements using the Web Inspector (Simulator)
\f0\b0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
1. Launch Hybrid app and navigate to the WebView page OR Launch Safari browser and navigate to the webpage\
2. Open desktop Safari\
3. Enable \'93Develop\'94 menu option if not already enabled. Got to Safari -> Preferences\'85 -> Advanced menu and enable \'93Show Develop menu in menu bar\'94 option\
4. Go to Develop Menu -> Select Simulator and then the WebView page/Browser page -> It opens up the Web Inspector\
5. Copy the CSS or XPath or any other locator as you would do in Selenium\
\
\

\f1\b iOS: Hybrid app: Driver Context Switching and Automating WebView elements (Simulator - Example)
\f0\b0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
1. Get Context Handles\
2. Switch driver to WebView context\
3. Find WebView Elements\
\

\f1\b iOS: Inspecting and Automating WebView elements (Real Device - UBER app)
\f0\b0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
Steps to inspect WebView elements:\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
1. Launch Hybrid app and navigate to the WebView page OR Launch Safari browser and navigate to the webpage\
2. Open desktop Safari\
3. Enable \'93Develop\'94 menu option if not already enabled. Got to Safari -> Preferences\'85 -> Advanced menu and enable \'93Show Develop menu in menu bar\'94 option\
4. Go to Develop Menu -> Select the Real Device and then the WebView page/Browser page -> It opens up the Web Inspector\
5. If WebView/Browser page is not displayed under Develop menu, then on your mobile, open Settings app -> Safari -> Advanced -> Enable Web Inspector\
5. Copy the CSS or XPath or any other locator as you would do in Selenium\
\
Steps to automate WebView elements:\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97-\
1. Get Context Handles\
2. Switch driver to WebView context\
3. Find WebView Elements\
\

\f1\b iOS: Safari browser: Creating new driver session (tesla.com)
\f0\b0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Pre-requisite: Enable Web Inspector\
\

\f1\b iOS: Safari browser: Automating UI Elements (tesla.com)
\f0\b0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
-> Inspect through mobile browser\
-> Inspect through desktop browser\
\

\f1\b Android: Inspecting WebView elements using the Chrome Remote Debugger (Emulator and Real Device)
\f0\b0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
1. Launch Hybrid app and navigate to the WebView page OR Launch Chrome browser and navigate to the webpage\
2. Open desktop Chrome\
3. \cf3 \cb4 \expnd0\expndtw0\kerning0
\ul \ulc3 chrome://inspect#devices\cf0 \cb1 \kerning1\expnd0\expndtw0 \ulnone \
4. Inspect\
5. Copy the CSS or XPath or any other locator as you would do in Selenium\
\
Notes for real device:\
- Make sure USB debugging is enabled\
- Make sure device shows up as authorised for \'93adb devices\'94 command\
- Turn OFF Play Protect setting\
\

\f1\b Android: Hybrid app: Automating WebView elements
\f0\b0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
1. Get Context Handles\
2. Switch driver to WebView context\
3. Find WebView Elements\
\

\f1\b Android: Using compatible ChromeDriver (to match Chrome browser version)
\f0\b0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\cf5 \expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
ChromeDriver needs to be installed (a default version comes with Appium) and configured for automating the specific version of Chrome available on the device. \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}Use \cf6 \cb7 \expnd0\expndtw0\kerning0
chromedriverExecutable\cf0 \cb1 \kerning1\expnd0\expndtw0  capability to provide path to the ChromeDriver version.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 Android: Chrome browser: Create new driver session
\f0\b0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\pardeftab720\partightenfactor0
\cf5 \expnd0\expndtw0\kerning0
Pre-requisites:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Make sure Chrome is installed on your device or emulator.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
ChromeDriver needs to be installed (a default version comes with Appium) and configured for automating the specific version of Chrome available on the device. \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}Use \cf6 \cb7 \expnd0\expndtw0\kerning0
chromedriverExecutable (and not chromedriverExecutableDir)\cf0 \cb1 \kerning1\expnd0\expndtw0  capability to provide path to the ChromeDriver version.\
\pard\tx720\pardeftab720\partightenfactor0
\cf0 \
Note:\
On Mac, we will need to trust the developer for ChromeDriver, else it will not work\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 Android: Chrome browser: Automating UI elements (tesla.com)
\f0\b0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Use browserName capability with value Chrome or Chromium\
\
Note:\
Id, classname locators may not work for Chrome because it uses W3C standards by default.\
You may get \'93Invalid Locator\'94 error.\
This issue doesn\'92t happen with Selenium for desktop chrome browser because Selenium internally converts the locators to css.\
Appium doesn\'92t convert locators internally due to limitations.\
More here: https://github.com/appium/appium/issues/13306 [If you find the defect is fixed, it means Id and classname should also work]\
\
Workarounds [May not be required if above defect gets fixed]:\
Force chrome to use JSONWP instead of W3C\
Convert locators to CSS, XPath\
\

\f1\b Android: Automatic discovery of compatible ChromeDriver 
\f0\b0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
No need to manage ChromeDriver versions!\
Appium can automatically download the compatible ChromeDriver and use it for automating the browser. \
\
\pard\pardeftab720\partightenfactor0

\f2 \cf8 \cb9 \expnd0\expndtw0\kerning0
appium --allow-insecure chromedriver_autodownload\

\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \

\f2 \cf8 \cb9 \expnd0\expndtw0\kerning0
chromedriverExecutableDir
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Note:\
If you are behind proxy or if there is a firewall, you will have to work with your security team, else download might not work.\
Documentation: http://appium.io/docs/en/writing-running-appium/web/chromedriver/}